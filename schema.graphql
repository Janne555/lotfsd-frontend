scalar BigInt

scalar Byte

type CharacterSheet {
  age: Int!
  alignment: String!
  architecture: Int!
  attackBonus: Int!
  breathWeapon: Int!
  bushcraft: Int!
  charisma: Int!
  class: String!
  climbing: Int!
  constitution: Int!
  copper: Int!
  currentHp: Int!
  defensive: Boolean!
  dexterity: Int!
  effects: [Effect]
  experience: Int!
  gender: String!
  gold: Int!
  id: String!
  improvedParry: Boolean!
  intelligence: Int!
  languages: Int!
  magic: Int!
  magicalDevice: Int!
  maxHp: Int!
  name: String!
  openDoors: Int!
  paralyze: Int!
  parry: Boolean!
  poison: Int!
  press: Boolean!
  properties: [Property]
  race: String!
  retainers: [Retainer]
  search: Int!
  silver: Int!
  sleightOfHand: Int!
  sneakAttack: Int!
  standard: Boolean!
  stealth: Int!
  strength: Int!
  surpriseChance: Int!
  tinkering: Int!
  wisdom: Int!
}

input CharacterSheetInput {
  name: String!
  experience: Int!
  class: String!
  race: String!
  age: Int!
  gender: String!
  alignment: String!
  attackBonus: Int!
  currentHp: Int!
  maxHp: Int!
  surpriseChance: Int!
  charisma: Int!
  constitution: Int!
  dexterity: Int!
  intelligence: Int!
  strength: Int!
  wisdom: Int!
  paralyze: Int!
  poison: Int!
  breathWeapon: Int!
  magicalDevice: Int!
  magic: Int!
  architecture: Int!
  bushcraft: Int!
  climbing: Int!
  languages: Int!
  openDoors: Int!
  search: Int!
  sleightOfHand: Int!
  sneakAttack: Int!
  stealth: Int!
  tinkering: Int!
  copper: Int!
  silver: Int!
  gold: Int!
  standard: Boolean!
  parry: Boolean!
  improvedParry: Boolean!
  press: Boolean!
  defensive: Boolean!
  effects: [EffectInput] = null
  retainers: [RetainerInput] = null
  properties: [PropertyInput] = null
}

"""
The `Date` scalar type represents a year, month and day in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

"""
The `DateTime` scalar type represents a date and time. `DateTime` expects
timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTime

"""
The `DateTimeOffset` scalar type represents a date, time and offset from UTC.
`DateTimeOffset` expects timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTimeOffset

scalar Decimal

type Effect {
  id: String!
  method: String!
  target: String!
  type: String!
  value: Int!
}

input EffectInput {
  type: String!
  target: String!
  method: String!
  value: Int!
}

scalar Guid

type ItemInstance {
  equipped: Boolean!
  id: String!
}

input ItemInstanceInput {
  id: String!
  equipped: Boolean!
}

scalar Long

"""
The `Milliseconds` scalar type represents a period of time represented as the total number of milliseconds.
"""
scalar Milliseconds

type Mutation {
  createCharacterSheet(characterSheet: CharacterSheetInput!): CharacterSheet
}

type Property {
  description: String!
  id: String!
  inventory: [ItemInstance]
  location: String!
  name: String!
  rent: Int!
  value: Int!
}

input PropertyInput {
  id: String!
  name: String!
  value: Int!
  rent: Int!
  location: String!
  description: String!
  inventory: [ItemInstanceInput] = null
}

type Query {
  characterSheet(id: String = null): CharacterSheet
  characterSheets: [CharacterSheet]
}

type Retainer {
  class: String!
  hitpoints: Int!
  id: String!
  level: Int!
  name: String!
  position: String!
  share: Int!
  wage: Int!
}

input RetainerInput {
  name: String!
  position: String!
  class: String!
  level: Int!
  hitpoints: Int!
  wage: Int!
  share: Int!
}

scalar SByte

"""
The `Seconds` scalar type represents a period of time represented as the total number of seconds.
"""
scalar Seconds

scalar Short

scalar UInt

scalar ULong

scalar Uri

scalar UShort

